{"posts":[{"title":"Git快速入门","text":"简单快速的入门 git 基本命令如何使用；如何创建仓库、如何提交托管你的工程项目…… 一、版本控制​ 在一个工程项目中存在不同的版本，例如工作报告中的项目报告1、项目报告2、项目报告最终版、项目报告最终版2等等。 ​ 版本控制（Revision control）是一种在开发过程中用于管理我们对文件、目录或者工程等内容的修改，方便查看或更改历史记录，备份以便于恢复某个版本的技术。 ​ 在多人开发时控制的作用就显得更为明显 二、基础命令2.1. 查看 git 配置12git config -list|cat # 查看 git 所有配置git config --global --list|cat # 查看 git 本地配置 2.2. 配置连接 git在控制本地计算机连接 git 时 必须对 user.name(用户名)、user.email(用户邮箱) 使用如下命令进行配置 12git config --global user.name &quot;moekylin&quot; # 用户名git config --global user.email “moekylin@qq.com” # 邮箱 git 配置默认文件都保存在本地文件夹内，不止使用命令，甚至可以通过打开文件进行修改，不过并不推荐使用其他方式，防止出现不必要的报错 三、知识拓展首先 Git 在本地有三个区域，分别为：工作目录（Working Directory）、暂存区（Stage/Index）、资源库（Repository）。以及在云端还有一个 git 仓库（Remote Directory） 123456flowchart LRWD[Working Directory]SI[Stage/Index]RM[Remote Directory] WD--git add files&lt;br&gt;添加文件到暂存区--&gt;SI--git commit&lt;br&gt;提交到本地仓库--&gt;History--git pushh&lt;br&gt;提交到远程仓库--&gt;RM RM--git pull&lt;br&gt;拉区仓库内容到本地--&gt;History--git reset&lt;br&gt;回滚commit内容--&gt;SI--git checkout&lt;br&gt;将暂存区的拉回本地--&gt;WD Workspace：工作区，存放着本地项目代码 Index/Stage：暂存区，存放临时的改动（即将提交的信息） Repository：仓库区（或本地仓库），存放数据的位置，存放着所有版本的数据，其中HEAD指向最新放入仓库的数据 Remote：远程仓库：托管代码的服务器，通常就是存放着项目的服务器 四、上传你的项目4.1. 初始化仓库1git init 4.2. 查看文件状态1git status 4.3. 跟踪文件1git add . # .代表所有文件，跟踪目录内所有文件；也可以替换.选择指定指定文件夹或文件 4.4. 提交到本地仓库12git commit -m &quot;消息内容&quot; # 提交暂存区的内容到本地仓库 -m 提交信息# 此时也可以使用 git status 查看本地文件状态 4.5. 忽略提交 在提交你的项目源码时，某些文件（例.idea、npm_moudles）是不需要提交的，为减少冗余可以通过配置.gitignore文件来指定不需要提交的文件 123456# 为注释*.txt # 所有.txt结尾的文件!lib.txt # lib.txt 无视规则/tmp # 根目录下的 tmp，不包含其他目录的tmp文件夹build/ # build/目录下的所有文件夹doc/*.txt # doc/目录下所有.txt后缀的文件 4.6. 拉区远程仓库1git clone https://github.com/moekylin/GitLearn.git 4.7. 提交本地内容1234echo &quot;这里储存着我的第一次提交和修改内容 commit 为 Fuck&quot; &gt;&gt; README.txt # 创建文件git add . # 添加所有文件到暂存区git commit -m &quot;Fuck&quot; # 指定备注为Fuckgit push origin main # 提交到远程仓库的main分支 五、git分支 不同的分支存在着不同版本的项目，当然在github pages也就是个人博客内，我试着尝试用main分支提供访问的，source分支作为源码，img分支作为图床来进行，以便于统一操作的管理。有关这些内容如果可行，那么我也会进行总结。","link":"/2022/07/20/jumble/Git%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"title":"docker-compose常用命令","text":"docker-compose + docker 常用运行、查看、停止命令…… 1. 命令格式12345678docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]Parameter: -f，–file FILE指定Compose模板文件，默认为docker-compose.yml，可以多次指定。 -p，–project-name NAME指定项目名称，默认将使用所在目录名称作为项目名。 -x-network-driver 使用Docker的可拔插网络后端特性（需要Docker 1.9+版本） -x-network-driver DRIVER指定网络后端的驱动，默认为bridge（需要Docker 1.9+版本） -verbose输出更多调试信息 -v，–version打印版本并退出 2. 运行容器docker-compose up [options] 123456789101112131415Parameter: -d 在后台运行 --no-color 不使用颜色区分不同的服务的控制输出 --no-deps 不启用服务所链接的容器 --force-recreate 强制重新创建容器，不能与–no-recreate同时使用 -no-recreate 如果容器已经存在，则不重新创建，不能与–force-recreate同时使用 -no-build 不自动构建缺失的服务镜像 -build 在启动容器前构建服务镜像 -abort-on-container-exit 停止所有容器，如果任何一个容器被停止，不能与-d同时使用 -t, –timeout TIMEOUT 停止容器时候的超时（默认为10秒） -remove-orphans 删除服务中没有在compose文件中定义的容器 -scale SERVICE=NUM 设置服务运行容器的个数，将覆盖在compose中通过scale指定的参数 Usage: docker-compose up -d docker-compose up -d --force-recreate 3. 列出容器3.1 列出所有运行中的容器 1docker-compose ps 3.2 列出所有容器的id以及状态 1docker ps 3.3 列出所有运行中容器的id 1docker ps -aq 4. 停止容器4.1 停止某一容器 1docker-compose stop &lt;SERVICE&gt; 4.2 停止所有正在运行的容器 1docker ps -aq|xargs docker stop # docker ps -aq 列出所有ID，xargs 转交给 docker stop 停止所有容器","link":"/2022/07/20/jumble/docker-compose%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"常用数据处理命令","text":"相较于 Windows 而言，Unix 提供的命令行使我们的工作更加快捷。简单记录通过命令对数据的处理方式。 一、增加数据1.1 vim内 行末添加 edu.cn 1:1,$ s/$/edu.cn/g 二、删除数据2.1 删除 .cn 以及之后内容 1sed 's/.cn.*$//' file.txt 2.2 指定删除 www. 1sed 's/www.//' file.txt 三、查看数据3.1 查看指定行 1sed -n '1,100p' file.txt 3.2 统计行数 1wc file.txt 四、更改数据 替换 https:// 为空 1sed 's/https:\\/\\///g' file.txt","link":"/2022/07/20/jumble/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"},{"title":"可能是最简单的在mac下安装BurpSuite指南","text":"Mac下安装破解 BurpSuite 生成快捷方式启动并汉化(可选)等… 基于 arm，Intel 同理 一、下载 BurpSuite 下载 ​ https://portswigger.net/burp/releases 注册机下载 ​ Loader: BurpSuiteLoader.jar(167KB) ​ Keygen: burp-keygen-scz.jar(48KB) 汉化文件下载 ​ BurpSuiteCnV2.0.jar 二、破解 访达 -&gt; 右键 BurpSuite 显示包内容 -&gt; Contents -&gt; Resources -&gt; app ​ /Applications/Burp Suite Professional.app/Contents/Resources/app ​ 将 BurpSuiteLoader.jar、burp-keygen-scz.jar、BurpSuiteCnV2.0.jar 三个文件都拖入文件夹 编辑 /Applications/Burp Suite Professional.app/Contents/Info.plist 在&lt;string&gt;-Dexe4j.moduleName=$APP_PACKAGE&lt;/string&gt; 之后插入以下语句 12&lt;string&gt;-noverify&lt;/string&gt;&lt;string&gt;-javaagent:$APP_PACKAGE/Contents/Resources/app/BurpSuiteLoader.jar&lt;/string&gt; 启动台打开 BurpSuite 三、汉化 (可选) 另类方式启动 需要自行安装 JDK 环境 Java 下载 ​ https://www.azul.com/downloads/ ​ 下拉找到Download Azul Zulu Builds of OpenJDK 选择合适的版本下载 .dmg 并安装 使用 Java 启动 在终端进入目录 /Applications/Burp Suite Professional.app/Contents/Resources/app 执行命令调用 BurpSuiteCn 打开 BurpSuite java -noverify -javaagent:BurpSuiteCnV2.0.jar -javaagent:BurpSuiteLoader.jar.jar -Xmx2048m -jar burpsuite_pro.jar 生成快速启动方式 启动台 -&gt; 自动操作(默认在其他内) -&gt; 新建文稿 -&gt; 应用程序 -&gt; 资源库 -&gt; 实用工具 -&gt; 运行 Shell 脚本 双击后编写启动脚本 1cd &quot;/Applications/Burp Suite Professional.app/Contents/Resources/app&quot;;java -noverify -javaagent:BurpSuiteCnV2.0.jar -javaagent:BurpSuiteLoader.jar -Xmx2048m -jar burpsuite_pro.jar Ctrl + s 保存到任意位置即可使用 或许你可以直接保存到应用程序, 之后可以直接在启动台或者使用聚焦搜索等方式打开 关于图标: 右键程序 -&gt; 显示简介 直接把需要的图标拖到小机器人上即可 到此为止你的系统上已经可以同时运行 中文版以及英文版破解后的 BurpSuite 了","link":"/2022/07/22/security/macOS%E5%AE%89%E8%A3%85BurpSuite/"}],"tags":[{"name":"git","slug":"git","link":"/tags/git/"},{"name":"Command","slug":"Command","link":"/tags/Command/"},{"name":"Docker-compose","slug":"Docker-compose","link":"/tags/Docker-compose/"},{"name":"数据处理","slug":"数据处理","link":"/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"BurpSuite","slug":"BurpSuite","link":"/tags/BurpSuite/"}],"categories":[{"name":"jumble","slug":"jumble","link":"/categories/jumble/"},{"name":"security","slug":"security","link":"/categories/security/"}],"pages":[{"title":"关于","text":"🌈 Welcome my BlogLinksArchives: https://www.yuque.com/moekylin Github: https://github.com/moekylin Bilibili: https://space.bilibili.com/670041240","link":"/about/index.html"}]}